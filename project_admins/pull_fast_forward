#!/usr/bin/env python
#
############################################################################
#
# Name: pull_fast_forward
# Author: Manik Surtani (http://github.com/maniksurtani)
# Description: This script pulls a topic branch from a specified remote 
#              repository, merges it to a specified branch, and pushes the 
#              updated branch to the local repo's origin.  By default, the
#              merge will be aborted if it cannot be fast-forwarded, however
#              this can be overridden.
#
# Configuration: The following variables need to be set.

ORIGIN_REPO="origin" # The fork of upstream.  Can be a named remote or a full URL.
GIT="git" # Path to the git binary executable

#
############################################################################

import sys
import subprocess

def helpAndExit():
  print '''
  Usage: pull_fast_forward <remote repo to pull from> <branch on remote repo> <local release branch to merge into> [-f]
         
         By default, this script will abort if the merge cannot be fast-forwarded.  This allows a clean application of 
         any patches.  This behavior can be overridden by passing in the -f flag.
  '''
  sys.exit(1)

def run_git(opts):
  call = [GIT]
  for o in opts.split(' '):
    if o != '':
      call.append(o)
  subprocess.check_call(call)

def main():
  if len(sys.argv) < 4:
    helpAndExit()
  
  remote = sys.argv[1]
  remote_branch = sys.argv[2]
  release_branch = sys.argv[3]
  force_fast_forward = True
  if len(sys.argv) > 4:
    if sys.argv[4].lower() == "-f":
      force_fast_forward = False
  
  print "Pulling branch %s from repo %s and merging into %s" % (remote_branch, remote, release_branch)
  ff_check_failed = False
  
  try:    
    run_git("checkout -q -b __pull_fast_forward_temp %s" % release_branch)
    if force_fast_forward:    
      try:
        run_git("pull --ff-only -q %s %s" % (remote, remote_branch))
      except:
        ff_check_failed = True
    else:
      run_git("pull -q %s %s" % (remote, remote_branch))
      
    run_git("checkout -q %s" % release_branch)
    
    if not ff_check_failed:      
      run_git("merge __pull_fast_forward_temp")
      run_git("push %s %s" % (ORIGIN_REPO, release_branch))
      print "Branch %s on remote %s merged into %s and pushed to upstream." % (remote_branch, remote, release_branch)
    else:
      print "Could not fast-forward branch %s to new commits.  Please ask contributor to sync with upstream and re-issue pull request." % release_branch
  finally:  
    run_git("checkout -q %s" % release_branch)
    run_git("branch -D __pull_fast_forward_temp")

if __name__ == "__main__":
  main()
