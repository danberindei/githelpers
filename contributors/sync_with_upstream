#!/usr/bin/env python
#
############################################################################
#
# Name: sync_with_upstream
# Author: Manik Surtani (http://github.com/maniksurtani)
# Description: This script updates a fork of an upstream repository with new 
#              changes in the upstream.  It is designed to be run on a local 
#              clone of the fork.  In addition to updating necessary branches,
#              the script also rebases any topic branches that may exist.
#
# Configuration: The following variables need to be set.


UPSTREAM_REPO="upstream" # Can be a named remote, or a full URL, such as https://github.com/infinispan/infinispan
ORIGIN_REPO="origin" # The fork of upstream.  Can be a named remote or a full URL.
BRANCHES_TO_SYNC=["master", "4.2.x"] # These need to be on both the upstream, your fork and your clone.
TOPIC_BRANCH_PREFIX="t_" # All branches whose name starts with this will be rebased against their updated branch point
GIT="git" # Path to the git binary executable

#
############################################################################

import os
from os import path
import sys
import subprocess

def run_git(opts):
  call = [GIT]
  for o in opts.split(' '):
    if o != '':
      call.append(o)
  subprocess.check_call(call)

def init(): 
  if not os.path.isdir(".git"):
    print "This script MUST be run in the local clone of your forked repo!"
    sys.exit(1)
  print "Fetching new details from upstream"
  run_git("fetch -q %s" % UPSTREAM_REPO)
  run_git("fetch -q %s --tags" % UPSTREAM_REPO)

def handle_release_branches():
  for branch in BRANCHES_TO_SYNC:
    print "Synchronizing release branch %s" % branch
    run_git("checkout -q %s" % branch)
    output = subprocess.Popen([GIT, "status", "--porcelain"], stdout=subprocess.PIPE).communicate()[0]
    stash = False
    if output != "": 
      stash = True
      run_git("stash")
    
    run_git("pull -q %s %s" % (UPSTREAM_REPO, branch))
    run_git("push -q %s %s" % (ORIGIN_REPO, branch))  
    
    if stash:
      run_git("stash pop")
    
    run_git("push -q %s --tags" % ORIGIN_REPO)  

def handle_topics(): 
  ## Now handle topic branches.
  b = subprocess.Popen([GIT, "branch"], stdout=subprocess.PIPE).communicate()[0]
  branches = b.replace(' ', '').replace('*','').split('\n')
  print "Brancges are %s " % branches
  for branch in branches: 
    if branch.startswith(TOPIC_BRANCH_PREFIX):
      print "Analysing topic branch %s" % branch
      base_guess = {}
      for relbranch in BRANCHES_TO_SYNC:
        run_git("checkout -q %s" % branch)
        commits = subprocess.Popen([GIT, "--no-pager", "log", "--pretty=oneline", "%s..HEAD" % relbranch], stdout=subprocess.PIPE).communicate()[0]
        base_guess[relbranch] = len(commits.split('\n'))
    
      # print "Likely release branches for topic %s are %s" % (branch, base_guess)      
      items = [(v, k) for k, v in base_guess.items()]
      items.sort()
      # print "Likely release branches for topic %s are %s" % (branch, items)      
      base_branch = items[0][1]
      print "Rebasing using git rebase %s" % base_branch
      run_git("rebase %s" % base_branch)
      run_git("push -f %s %s" % (ORIGIN_REPO, branch))

def main():
  init()
  handle_release_branches()
  print "Local clone and %s synced with %s" % (ORIGIN_REPO, UPSTREAM_REPO)
  print "Now rebasing all topic branches that start with '%s'" % TOPIC_BRANCH_PREFIX
  handle_topics()  


if __name__ == "__main__":
  main()
